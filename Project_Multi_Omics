
# Get all the filenames and cancer types
setwd("C:/Users/ritasoaresss99/OneDrive/Desktop/Project Multi-Omics/Dados")
fileNames <- dir(pattern ="fpkm")
cancerTypes <- gsub("TCGA-", "", gsub("_htseq_fpkm-uq.tab", "", fileNames)) 

# Create a R list to save all information
geneExp <- vector("list", length=length(cancerTypes))
names(geneExp) <- cancerTypes
# Loop to read each file and save information
for(i in 1:length(cancerTypes)){
  # read file
  curData<-read.table(fileNames[i],sep="\t",header=T)
  #Get the expression levels of your gene, in this case as gene FOXO1, so the ensembl identification is:"ENSG00000150907.6"
  curData$X1=as.factor(curData$X1)
  curExp<-curData[curData$X1=="ENSG00000150907.6",]
  # Save the information in R list, and transform that TCGA expression logarithmically  
  geneExp[[i]] <- log2(curExp[-1])
}
#Save your data for downstream analyses
save(geneExp, file = "geneExp.RData")

##########################
#GENE EXPRESSION ANALYSIS#
##########################
setwd("C:/Users/ritasoaresss99/OneDrive/Desktop/Project Multi-Omics/Dados")
load("C:/Users/ritasoaresss99/OneDrive/Desktop/Project Multi-Omics/Dados/geneExp.RData")

plot_geneExp<-lapply(geneExp, as.numeric)

#CREATE NORMAL SAMPLES (BASED ON THE TCGA BARCODES FROM THE PATIENTS)
geneExp_normal<-geneExp 
for (i in 1:length(geneExp_normal)){
  #MEANS THAT WE ARE GOING TO WORK WITH THE IDS OF THE NORMAL SAMPLES, SO WE DIVIDE THE NAME OF THE IDS IN THE POINTS IN THE 4ยบ ELEMENT (SAMPLE) 
  #AND SELECT THE SAMPLE THAT HAS THE NUMBER 11, THAT MEANS THAT IS A NORMAL TISSUE SAMPLE
  pref_normal<-sapply(names(geneExp_normal[[i]]),function(x)unlist(strsplit(x,"\\."))[4])
  sample_ids_normal<-names(pref_normal)[grep("11",pref_normal)]
  geneExp_normal[[i]]<-geneExp_normal[[i]][sample_ids_normal]
}

#CREATE TUMURAL SAMPLES (BASED ON THE TCGA BARCODES FROM THE PATIENTS)
geneExp_tum<-geneExp 
for (i in 1:length(geneExp_tum)){
  #MEANS THAT WE ARE GOING TO WORK WITH THE IDS OF THE TUMORAL SAMPLES, SO WE DIVIDE THE NAME OF THE IDS IN THE POINTS IN THE 4ยบ ELEMENT (SAMPLE) 
  #AND SELECT THE SAMPLE THAT HAS THE NUMBER 1 TO 7, THAT MEANS THAT IS A TUMORAL TISSUE SAMPLE
  pref_tums<-sapply(names(geneExp_tum[[i]]),function(x)unlist(strsplit(x,"\\."))[4])
  sample_ids<-names(pref_tums)[grep("0[1:7]",pref_tums)]
  geneExp_tum[[i]]<-geneExp_tum[[i]][sample_ids]
}

##############################
#SELECT THE SIGNIFICANT DATA:#
##############################
#IN THIS STEP, IS  SELECTED FROM THE 33 TYPES OF CANCER, ONLY 17 TYPES OF CANCER ( THE ONES THAT HAVE GENE EXPRESSION VALUES FOR BOTH TISSUES, THE NORMAL AND THE TUMORAL)
indexinclude<-which(unlist(lapply(geneExp_normal,function(x)length(x)))>8)

#SELECT THE SIGNIFICANT NORMAL DATA:
geneExp_normal_<-geneExp_normal[indexinclude]

#SELECIONAR THE SIGNIFICANT TUMORAL DATA:
geneExp_tum_<-geneExp_tum[indexinclude]

#BARPLOT TO COUNT THE NUMBER OF SAMPLES FOR EACH TYPE OF CANCER FOR BOTH TISSUES 
pdf("Number_of_samples_barplot.pdf")
plot_data<-list(plotData_normal$BLCA,plotData_tum$BLCA,plotData_normal$BRCA,plotData_tum$BRCA,plotData_normal$CHOL,plotData_tum$CHOL,plotData_normal$COAD,plotData_tum$COAD,plotData_normal$ESCA,plotData_tum$ESCA,plotData_normal$HNSC,plotData_tum$HNSC,plotData_normal$KICH,plotData_tum$KICH,plotData_normal$KIRC,plotData_tum$KIRC,plotData_normal$KIRP,plotData_tum$KIRP,plotData_normal$LIHC,plotData_tum$LIHC,plotData_normal$LUAD,plotData_tum$LUAD,plotData_normal$LUSC,plotData_tum$LUSC,plotData_normal$PRAD,plotData_tum$PRAD,plotData_normal$READ,plotData_tum$READ,plotData_normal$STAD,plotData_tum$STAD,plotData_normal$THCA,plotData_tum$THCA,plotData_normal$UCEC,plotData_tum$UCEC)
names(plot_data)=c("","BLCA","","BRCA","","CHOL","","COAD","","ESCA","","HNSC","","KICH","","KIRC","","KIRP","","LIHC","","LUAD","","LUSC","","PRAD","","READ","","STAD","","THCA","","UCEC")

number_samples_normal_tum<- unlist(lapply(plot_data, length))
normal_and_tum_barplot<-barplot(number_samples_noraml_tum,col=c("paleturquoise","sienna2"),xlab="Cancer Type",ylab="Number Of Samples",las=2)
text(x= normal_tum_bar, y=number_samples_normal_tum,pos = 3, label = number_samples_normal_tum, cex = 0.8, col = "black")
legend("topright",legend = c("Normal","Tumoral")[1:2],pch=15,col = c("paleturquoise","sienna2"))
dev.off()


#BOXPLOT OF THE EXPRESSION LEVELS OF THE GENE FOXO1 ONLY FROM THE NORMAL SAMPLES
pdf("EXPRESSION_LEVELS_OF_THE_GENE_FOXO1_NORMAL_SAMPLES.pdf")
par(mar=c(6,4,4,4))
plotData_normal<-lapply(geneExp_normal_, as.numeric)
boxplot(plotData_normal,outline=FALSE,ylab="FOXO1 Expression Levels (log2 FPKMs)", xlab="Cancer Types",las=2,main="EXPRESSION LEVELS OF THE GENE FOXO1 ONLY FROM THE NORMAL SAMPLES",col=("paleturquoise"))
dev.off()

#BOXPLOT OF THE EXPRESSION LEVELS OF THE GENE FOXO1 ONLY FROM THE TUMORAL SAMPLES
pdf("EXPRESSION_LEVELS_OF_THE_GENE_FOXO1_TUMORAL_SAMPLES.pdf")
plotData_tum<-lapply(geneExp_tum_, as.numeric)
boxplot(plotData_tum,outline=FALSE,ylab="FOXO1 Expression Levels (log2 FPKMs)", xlab="Cancer Types",las=2,main="EXPRESSION LEVELS OF THE GENE FOXO1 ONLY FROM THE TUMORAL SAMPLES",col=("sienna2"))
dev.off()

#BOXPLOT COMPARING THE EXPRESSION LEVELS OF THE GENE FOXO1 BETWEEN THE NORMAL AND THE TUMORAL SAMPLES
plot_data<-list(plotData_normal$BLCA,plotData_tum$BLCA,plotData_normal$BRCA,plotData_tum$BRCA,plotData_normal$CHOL,plotData_tum$CHOL,plotData_normal$COAD,plotData_tum$COAD,plotData_normal$ESCA,plotData_tum$ESCA,plotData_normal$HNSC,plotData_tum$HNSC,plotData_normal$KICH,plotData_tum$KICH,plotData_normal$KIRC,plotData_tum$KIRC,plotData_normal$KIRP,plotData_tum$KIRP,plotData_normal$LIHC,plotData_tum$LIHC,plotData_normal$LUAD,plotData_tum$LUAD,plotData_normal$LUSC,plotData_tum$LUSC,plotData_normal$PRAD,plotData_tum$PRAD,plotData_normal$READ,plotData_tum$READ,plotData_normal$STAD,plotData_tum$STAD,plotData_normal$THCA,plotData_tum$THCA,plotData_normal$UCEC,plotData_tum$UCEC)
names(plot_data)=c("","BLCA","","BRCA","","CHOL","","COAD","","ESCA","","HNSC","","KICH","","KIRC","","KIRP","","LIHC","","LUAD","","LUSC","","PRAD","","READ","","STAD","","THCA","","UCEC")
pdf("EXPRESSION_LEVELS_OF_THE_GENE_FOXO1_NORMAL_SAMPLES_AND_TUMORAL_AND_POINT.pdf")
par(mar=c(13,4.2,9.6,0.6), mgp=c(2.4,0.8, 0), las=1)
boxplot(plot_data,outline=FALSE,ylab="FOXO1 Expression Levels (log2 FPKMs)",las=2,xaxs = FALSE,col=c("paleturquoise","sienna2"))
legend("topleft",legend = c("Normal","Tumoral")[1:2],pch=15,col = c("paleturquoise","sienna2"),cex =0.5,horiz = T)
points(x=0.635, y=26, pch="*", cex=2)
dev.off()

#dataFrame
temp <- cbind(names(plot_data), unlist(lapply(plot_data, function(x) length(x))))
temp <- unlist(apply(temp, 1, function(x) rep(x[1], x[2])))
plot_data_frame <- data.frame("cancer_Types"=temp, "geneExp"=unlist(plot_data))
View(plot_data_frame)

#STATISTICAL ANALYSIS OF THE DATA, WITH T-TEST:

#BLCA
BLCA_<-t.test(plotData_normal$BLCA,plotData_tum$BLCA)
BLCA<-BLCA_$p.value

#BRCA
BRCA_<-t.test(plotData_normal$BRCA,plotData_tum$BRCA)
BRCA<-BRCA_$p.value

#CHOL
CHOL_<-t.test(plotData_normal$CHOL,plotData_tum$CHOL)
CHOL<-CHOL_$p.value

#COAD
COAD_<-t.test(plotData_normal$COAD,plotData_tum$COAD)
COAD<-COAD_$p.value

#ESCA
ESCA_<-t.test(plotData_normal$ESCA,plotData_tum$ESCA)
ESCA<-ESCA_$p.value

#HNSC
HNSC_<-t.test(plotData_normal$HNSC,plotData_tum$HNSC)
HNSC<-HNSC_$p.value

#KICH
KICH_<-t.test(plotData_normal$KICH,plotData_tum$KICH)
KICH<-KICH_$p.value

#KIRC
KIRC_<-t.test(plotData_normal$KIRC,plotData_tum$KIRC)
KIRC<-KIRC_$p.value

#KIRP
KIRP_<-t.test(plotData_normal$KIRP,plotData_tum$KIRP)
KIRP<-KIRP_$p.value

#LIHC
LIHC_<-t.test(plotData_normal$LIHC,plotData_tum$LIHC)
LIHC<-LIHC_$p.value

#LUAD
LUAD_<-t.test(plotData_normal$LUAD,plotData_tum$LUAD)
LUAD<-LUAD_$p.value

#LUSC
LUSC_<-t.test(plotData_normal$LUSC,plotData_tum$LUSC)
LUSC<-LUSC_$p.value

#PRAD
PRAD_<-t.test(plotData_normal$PRAD,plotData_tum$PRAD)
PRAD<-PRAD_$p.value

#READ
READ_<-t.test(plotData_normal$READ,plotData_tum$READ)
READ<-READ_$p.value

#STAD
STAD_<-t.test(plotData_normal$STAD,plotData_tum$STAD)
STAD<-STAD_$p.value

#THCA
THCA_<-t.test(plotData_normal$THCA,plotData_tum$THCA)
THCA<-THCA_$p.value

#UCEC
UCEC_<-t.test(plotData_normal$UCEC,plotData_tum$UCEC)
UCEC<-UCEC_$p.value

#DATAFRAME WITH ALL P-VALUES
p_values<-c(BLCA,BRCA,CHOL,COAD,ESCA,HNSC,KICH,KIRC,KIRP,LIHC,LUAD,LUSC,PRAD,READ,STAD,THCA,UCEC)
names(p_values)<-c("BLCA","BRCA","CHOL","COAD","ESCA","HNSC","KICH","KIRC","KIRP","LIHC","LUAD","LUSC","PRAD","READ","STAD","THCA","UCEC")
p_value=as.data.frame(p_values)

#DATAFRAME WITH ALL THE ADJUST P-VALUES
adjust_p_values<-p.adjust(p_values)
adjust_p_values<-as.data.frame(adjust_p_values)


#EXTRATION OF THE MEAN FROM THE EXPRESSION LEVELS OF FOXO1 FROM NORMAL TISSUE AND TUMORAL TISSUE TO PERFORM THE LOG-FOLD CHANGE
mean_tum<-unlist(lapply(plotData_tum,function(x)mean(na.omit(x))))
mean_normal<-unlist(lapply(plotData_normal,function(x)mean(na.omit(x))))
logfc<-as.data.frame(mean_tum-mean_normal)

#SAVE THE TUMORAL EXPRESSION LEVELS OF FOXO1 TO USED IN THE SURVIVAL ANALYSIS:
save(geneExp_tum,file="geneExp_tum.RData")
##############################################################################################
# Load the data to the survival analysis
##############################################################################################

setwd("C:/Users/kitty/OneDrive/Desktop/Project Multi-Omics/Dados")

load("C:/Users/kitty/OneDrive/Desktop/Project Multi-Omics/Dados/geneExp_tum.RData")

load("PanCancer_GDC_clinicalInfo.RData")
##############################################################################################
# Survival Analysis
##############################################################################################

# Install packages
install.packages("survival")
install.packages("survminer")

# Load R packages
library(survival);library(survminer)
#library(survC1)-to another survival analysis
#library(survival)-survfit
#library(survminer)-ggsurvplots

#ESTABLISH THE TUMORAL FOXO1 EXPRESSION LEVELS TO ALL THE CANCER TYPES, EXCEPT LCML BECAUSE THAT ONE IS THE ONLY THAT DOESN'T HAVE SAMPLES WITH TUMORAL FOXO1 EXPRESSION LEVELS
cancer_types<-c("ACC","BLCA","BRCA","CESC","CHOL","COAD","DLBC","ESCA","GBM","HNSC","KICH","KIRC","KIRP","LGG","LIHC","LUAD","LUSC","MESO","OV","PAAD","PCPG","PRAD","READ","SARC","SKCM","STAD","TGCT","THCA","THYM","UCEC","UCS","UVM")
geneExp_tum__<-intersect(names(geneExp_tum),cancer_types)
geneExp_tum<-geneExp_tum[geneExp_tum__]


pdf("c_cancertum_____.pdf")
for (i in 1:length(cancer_types)){
  c_cancer<-cancer_types[i]

table_cancer<-geneExp_tum[[c_cancer]]
# Get names of the patients (in the same order that in the matrix logTPMs)
tumorSamples <- colnames(table_cancer)
patientsIDs <- substring(tumorSamples, 1,12)
patientsIDs<-(gsub("\\.","-",patientsIDs))
clinicalInfo_<-as.data.frame(clinicalInfo[[c_cancer]])
patientsIDs<-intersect(patientsIDs,rownames(clinicalInfo_))

#Get survival information:

#REMOVE ALL THE STRANGE VALUES FROM THIS DATAFRAME, BY ATTRIBUTING NA TO THEM:
clinicalInfo_[which(clinicalInfo_$days_to_death=="-Inf"),"days_to_death"]<-NA
clinicalInfo_[which(clinicalInfo_$days_to_last_followup=="-6"),"days_to_last_followup"]<-NA
clinicalInfo_[which(clinicalInfo_$days_to_last_followup=="-Inf"),"days_to_last_followup"]<-NA
clinicalInfo_[which(clinicalInfo_$days_to_last_followup=="0"),"days_to_last_followup"]<-NA
clinicalInfo_[which(clinicalInfo_$days_to_last_followup=="-64"),"days_to_last_followup"]<-NA
clinicalInfo_[which(clinicalInfo_$days_to_death=="0"),"days_to_death"]<-NA
clinicalInfo_[which(clinicalInfo_$days_to_death=="[Not Applicable]"),"days_to_death"]<-NA
clinicalInfo_[which(clinicalInfo_$days_to_last_followup=="[Completed]"),"days_to_last_followup"]<-NA

#ASSIGN AS TIME, THE TIME FROM THE LAST FOLLOWUP UNTIL THE OCCURENCE OF DEATH, IF THE PATIENT IS DEAD:
time <-unlist(apply(clinicalInfo_[patientsIDs, c("days_to_death","days_to_last_followup")],1, function(x) as.numeric(na.omit(x))))/365
time<-as.data.frame(time)

#INTERSECT THE PATIENTS USED IN TIME WITH THE DATAFRAME CLINICALINFO_, TO USE THE SAME PATIENTS AND THEIR INFORMATION FOR THE REST OF THE SURVIVAL ANALYSIS:
patients_<-intersect(rownames(time),rownames(clinicalInfo_))

#ATTRIBUTE TO VITALSTATUS, IF THE PATIENT IS DEAD OR ALIVE (ALIVE=0;DEAD=1)
vitalStatus<-clinicalInfo_[patients_,"vital_status"]
vitalStatus<-ifelse(vitalStatus=="Alive",0,1)

# CLASSIFY PATIENTS ACCORDING TO THE EXPRESSION LEVELS OF FOXO1:
geneExpLevels <- as.numeric(table_cancer[,match(patients_,patientsIDs)])#patients ids
geneExpStatus <- ifelse(geneExpLevels> median(geneExpLevels), "High", "Low")

#CREATE A SURVIVAL OBJECT
data <- data.frame("time"=unlist(time), "status"=vitalStatus, "group"=geneExpStatus)
#data<-na.omit(data)
surv_data <- Surv(data$time, data$status)

#ESTIMATE THE SURVIVAL CURVE CONSIDERING ONLY 1 GROUP WITH ALL THE SAMPLES
surv_fit <- survfit(surv_data ~ 1, data=data)

#PLOT THE SURVIVAL CURVE
ggsurvplot(surv_fit, conf.int = F, risk.table = TRUE, title = paste("Survival curves",cancer_types[i]) ,xlab = paste("Time (years)",cancer_types[i]), censor = T,data=data)

#ESTIMATE THE SURVIVAL CURVES FOR THE 2 GROUPS:HIGH AND LOW EXPRESSION OF FOXO1
surv_fit_groups <- survfit(surv_data ~ group, data=data)

#PLOT THE SURVIVAL CURVES FOR THE 2 GROUPS: HIGH AND LOW EXPRESSION OF FOXO1
ggsurvplot(surv_fit_groups, conf.int = F,risk.table = TRUE, title = paste("Survival curves for two groups of expression",cancer_types[i]), xlab = "Time (years)", censor = T,data=data, pval=T,ncensor.plot = TRUE)


#COMPARE THE 2 SURVIVAL CURVES FROM THE HIGH AND LOW EXPRESSION OF FOXO1 (THROUGH STATISTIC ANALYSIS- CHI-SQUARED) 
surv_groups <- survdiff(surv_data ~ group, data=data)
print(surv_groups)

#EXTRATON OF THE P-VALUE FROM THE STATISTIC ANALYSIS COMPARING THE 2 SURVIVAL CURVES FROM THE HIGH AND LOW EXPRESSION OF FOXO1
p_val<-pchisq(surv_groups$chisq, length(surv_groups$n)-1, lower.tail = FALSE)
print(p_val)

}#END OF THE LOOP FOR ALL THE CANCER TYPES

dev.off()

#CREATE A DATAFRAME WITH THE P-VALUES AND THE ADJUST P-VALUES:
p_value<-c(0.4680332,0.1253217,0.8683435,0.3094409,0.7478255,0.5739236,0.9061073,0.3522168,0.3719064,0.8301323,0.6929081,0.05354982,0.6309686,0.00408602,0.006188474,0.3055138,0.3524241,0.8316124,0.02138746,0.8176485,0.8751217,0.5361649,0.9259607,0.2165511,0.3853248,0.7645307,0.07462768,0.8772739,0.1544319,0.8930452,0.8196292,0.7875002)
p_values<-as.data.frame(p_value,row.names = cancer_types)
adjust_p_values<-p.adjust(p_value)
p_values_and_adjust<-cbind(p_values,adjust_p_values)
